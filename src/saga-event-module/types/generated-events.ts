// This file is auto-generated by the 'generate-event-types' command.
// Do not edit this file manually.

export const AppEvents = {
  /**
   *
   */
  USER_CREATION_INIT: {
    name: 'user.creation.init',
    description: '',
    payloadClass: undefined,
  },

  /**
   *
   */
  USER_CREATED_SUCCESS: {
    name: 'user.created.success',
    description: '',
    payloadClass: undefined,
  },

  /**
   *
   */
  USER_CREATED_FAILURE: {
    name: 'user.created.failure',
    description: '',
    payloadClass: undefined,
  },

  /**
   *
   */
  USER_BUFFER_SUCCESS: {
    name: 'user.buffer.success',
    description: '',
    payloadClass: undefined,
  },

  /**
   *
   */
  USER_BUFFER_FAILURE: {
    name: 'user.buffer.failure',
    description: '',
    payloadClass: undefined,
  },

  /**
   * Starts the order placement process.
   */
  ORDER_PLACEMENT_INIT: {
    name: 'order.placement.init',
    description: 'Starts the order placement process.',
    payloadClass: undefined,
  },

  /**
   * Fired when the order is fully confirmed and paid.
   */
  ORDER_CONFIRMED_SUCCESS: {
    name: 'order.confirmed.success',
    description: 'Fired when the order is fully confirmed and paid.',
    payloadClass: undefined,
  },

  /**
   * Fired when any step in the order placement saga fails.
   */
  ORDER_PLACEMENT_FAILED: {
    name: 'order.placement.failed',
    description: 'Fired when any step in the order placement saga fails.',
    payloadClass: undefined,
  },

  /**
   * Fired when stock has been successfully reserved.
   */
  INVENTORY_RESERVED_SUCCESS: {
    name: 'inventory.reserved.success',
    description: 'Fired when stock has been successfully reserved.',
    payloadClass: undefined,
  },

  /**
   * Fired when there is not enough stock.
   */
  INVENTORY_RESERVED_FAILURE: {
    name: 'inventory.reserved.failure',
    description: 'Fired when there is not enough stock.',
    payloadClass: undefined,
  },

  /**
   * Fired when the payment is successfully processed.
   */
  PAYMENT_PROCESSED_SUCCESS: {
    name: 'payment.processed.success',
    description: 'Fired when the payment is successfully processed.',
    payloadClass: undefined,
  },

  /**
   * Fired when the payment is rejected.
   */
  PAYMENT_PROCESSED_FAILURE: {
    name: 'payment.processed.failure',
    description: 'Fired when the payment is rejected.',
    payloadClass: undefined,
  },

  /**
   * Fired when a video is uploaded and ready for processing.
   */
  VIDEO_UPLOADED: {
    name: 'video.uploaded',
    description: 'Fired when a video is uploaded and ready for processing.',
    payloadClass: undefined,
  },

  /**
   * Fired if the initial video upload processing fails.
   */
  VIDEO_UPLOAD_FAILED: {
    name: 'video.upload.failed',
    description: 'Fired if the initial video upload processing fails.',
    payloadClass: undefined,
  },

  /**
   * Fired when video transcoding is complete.
   */
  VIDEO_TRANSCODED_SUCCESS: {
    name: 'video.transcoded.success',
    description: 'Fired when video transcoding is complete.',
    payloadClass: undefined,
  },

  /**
   * Fired if video transcoding fails.
   */
  VIDEO_TRANSCODED_FAILURE: {
    name: 'video.transcoded.failure',
    description: 'Fired if video transcoding fails.',
    payloadClass: undefined,
  },

  /**
   * Fired when a video thumbnail is generated.
   */
  THUMBNAIL_GENERATED_SUCCESS: {
    name: 'thumbnail.generated.success',
    description: 'Fired when a video thumbnail is generated.',
    payloadClass: undefined,
  },

  /**
   * Fired if thumbnail generation fails.
   */
  THUMBNAIL_GENERATED_FAILURE: {
    name: 'thumbnail.generated.failure',
    description: 'Fired if thumbnail generation fails.',
    payloadClass: undefined,
  },

  /**
   * Fired when the video is fully processed and published.
   */
  VIDEO_PUBLISHED_SUCCESS: {
    name: 'video.published.success',
    description: 'Fired when the video is fully processed and published.',
    payloadClass: undefined,
  },

  /**
   * Fired if the final publishing step fails.
   */
  VIDEO_PUBLISHED_FAILURE: {
    name: 'video.published.failure',
    description: 'Fired if the final publishing step fails.',
    payloadClass: undefined,
  },
} as const;
